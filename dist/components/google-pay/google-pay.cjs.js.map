{"version":3,"file":"google-pay.cjs.js","sources":["../../../src/components/google-pay/google-pay.tsx"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\nimport type * as Square from '@square/web-sdk';\n\n// Internals\nimport { useForm } from '~/contexts/form';\nimport { useEventListener } from '~/hooks/use-event-listener';\nimport { ButtonLoader } from './google-pay.styles';\nimport type { GooglePayProps } from './google-pay.types';\n\n/**\n * Renders a Google Pay button to use in the Square Web Payment SDK, pre-styled\n * to meet Google's branding guidelines.\n *\n * **Remember** that you need to set `createPaymentRequest()` in `SquareForm` if\n * you going to use this Payment Method\n *\n * @example\n *\n * ```tsx\n * function App() {\n *   return (\n *     <SquareForm {...props}>\n *       <GooglePay />\n *     </SquareForm>\n *   );\n * }\n * ```\n */\nconst GooglePay = ({\n  buttonColor,\n  buttonSizeMode = 'fill',\n  buttonType = 'long',\n  id = 'rswps-google-pay-container',\n  ...props\n}: GooglePayProps): JSX.Element | null => {\n  const [googlePay, setGooglePay] = React.useState<Square.GooglePay | undefined>(() => undefined);\n  const { cardTokenizeResponseReceived, createPaymentRequest, payments } = useForm();\n  const containerRef = React.useRef<HTMLDivElement>(null);\n\n  const options: Square.GooglePayButtonOptions = React.useMemo(() => {\n    const baseOptions = {\n      buttonColor,\n      buttonSizeMode,\n      buttonType,\n    };\n\n    // if a value from options is undefined delete it from the options object\n    return Object.keys(baseOptions).reduce((acc: Record<string, unknown>, key) => {\n      if (baseOptions[key as keyof typeof baseOptions] !== undefined) {\n        acc[key as string] = baseOptions[key as keyof typeof baseOptions];\n      }\n\n      return acc;\n    }, {});\n  }, [buttonColor, buttonSizeMode, buttonType]);\n\n  /**\n   * Handle the on click of the Google Pay button click\n   *\n   * @param e An event which takes place in the DOM.\n   * @returns The data be sended to `cardTokenizeResponseReceived()` function, or an error\n   */\n  const handlePayment = async (e: Event) => {\n    e.stopPropagation();\n\n    if (!googlePay) {\n      console.warn('Google Pay button was clicked, but no Google Pay instance was found.');\n\n      return;\n    }\n\n    try {\n      const result = await googlePay.tokenize();\n\n      if (result.status === 'OK') {\n        return cardTokenizeResponseReceived(result);\n      }\n\n      let message = `Tokenization failed with status: ${result.status}`;\n      if (result?.errors) {\n        message += ` and errors: ${JSON.stringify(result?.errors)}`;\n\n        throw new Error(message);\n      }\n\n      console.warn(message);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!createPaymentRequest) {\n      throw new Error('`createPaymentRequest()` is required when using digital wallets');\n    }\n\n    const abortController = new AbortController();\n    const { signal } = abortController;\n\n    const start = async (signal: AbortSignal) => {\n      const paymentRequest = payments?.paymentRequest(createPaymentRequest);\n\n      if (!paymentRequest) {\n        throw new Error('`paymentRequest` is required when using digital wallets');\n      }\n\n      try {\n        const googlePay = await payments?.googlePay(paymentRequest).then((res) => {\n          if (signal?.aborted) {\n            return;\n          }\n\n          setGooglePay(res);\n\n          return res;\n        });\n\n        await googlePay?.attach(`#${id}`, options);\n\n        if (signal.aborted) {\n          await googlePay?.destroy();\n        }\n      } catch (error) {\n        console.error('Initializing Google Pay failed', error);\n      }\n    };\n\n    start(signal);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [createPaymentRequest, payments, options]);\n\n  useEventListener({\n    listener: handlePayment,\n    type: 'click',\n    element: containerRef,\n    options: {\n      passive: true,\n    },\n  });\n\n  return (\n    <div {...props} id={id} ref={containerRef}>\n      {!googlePay ? <ButtonLoader /> : null}\n    </div>\n  );\n};\n\nexport default GooglePay;\nexport * from './google-pay.types';\n"],"names":["GooglePay","buttonColor","buttonSizeMode","buttonType","id","props","googlePay","setGooglePay","React","cardTokenizeResponseReceived","createPaymentRequest","payments","useForm","containerRef","options","baseOptions","acc","key","handlePayment","e","result","message","error","abortController","signal","paymentRequest","res","useEventListener","ButtonLoader","GooglePay$1"],"mappings":"mkBA6BMA,EAAY,CAAC,CACjB,YAAAC,EACA,eAAAC,EAAiB,OACjB,WAAAC,EAAa,OACb,GAAAC,EAAK,gCACFC,CACL,IAA0C,CACxC,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAM,SAAuC,IAAA,EAAe,EACxF,CAAE,6BAAAC,EAA8B,qBAAAC,EAAsB,SAAAC,GAAaC,EAAQ,QAAA,EAC3EC,EAAeL,EAAM,OAAuB,IAAI,EAEhDM,EAAyCN,EAAM,QAAQ,IAAM,CACjE,MAAMO,EAAc,CAClB,YAAAd,EACA,eAAAC,EACA,WAAAC,CAAA,EAIF,OAAO,OAAO,KAAKY,CAAW,EAAE,OAAO,CAACC,EAA8BC,KAChEF,EAAYE,KAAqC,SACnDD,EAAIC,GAAiBF,EAAYE,IAG5BD,GACN,CAAE,CAAA,CACJ,EAAA,CAACf,EAAaC,EAAgBC,CAAU,CAAC,EAQtCe,EAAgB,MAAOC,GAAa,CAGxC,GAFAA,EAAE,gBAAgB,EAEd,CAACb,EAAW,CACd,QAAQ,KAAK,sEAAsE,EAEnF,MACF,CAEI,GAAA,CACI,MAAAc,EAAS,MAAMd,EAAU,WAE3B,GAAAc,EAAO,SAAW,KACpB,OAAOX,EAA6BW,CAAM,EAGxC,IAAAC,EAAU,oCAAoCD,EAAO,SACzD,GAAIA,GAAQ,OACV,MAAAC,GAAW,gBAAgB,KAAK,UAAUD,GAAQ,MAAM,IAElD,IAAI,MAAMC,CAAO,EAGzB,QAAQ,KAAKA,CAAO,QACbC,GACP,QAAQ,MAAMA,CAAK,CACrB,CAAA,EAGFd,OAAAA,EAAM,UAAU,IAAM,CACpB,GAAI,CAACE,EACG,MAAA,IAAI,MAAM,iEAAiE,EAG7E,MAAAa,EAAkB,IAAI,gBACtB,CAAE,OAAAC,CAAW,EAAAD,EA8BnB,OA5Bc,MAAOC,GAAwB,CACrC,MAAAC,EAAiBd,GAAU,eAAeD,CAAoB,EAEpE,GAAI,CAACe,EACG,MAAA,IAAI,MAAM,yDAAyD,EAGvE,GAAA,CACInB,MAAAA,EAAY,MAAMK,GAAU,UAAUc,CAAc,EAAE,KAAMC,GAAQ,CACxE,GAAIF,CAAAA,GAAQ,QAIZ,OAAAjB,EAAamB,CAAG,EAETA,CAAA,CACR,EAED,MAAMpB,GAAW,OAAO,IAAIF,IAAMU,CAAO,EAErCU,EAAO,SACT,MAAMlB,GAAW,gBAEZgB,GACC,QAAA,MAAM,iCAAkCA,CAAK,CACvD,CAAA,GAGIE,CAAM,EAEL,IAAM,CACXD,EAAgB,MAAM,CAAA,CAEvB,EAAA,CAACb,EAAsBC,EAAUG,CAAO,CAAC,EAE3Ba,mBAAA,CACf,SAAUT,EACV,KAAM,QACN,QAASL,EACT,QAAS,CACP,QAAS,EACX,CAAA,CACD,EAGEL,EAAA,cAAA,MAAA,CAAK,GAAGH,EAAO,GAAAD,EAAQ,IAAKS,CAC1B,EAACP,EAA+B,KAAnBE,EAAA,cAACoB,EAAa,aAAA,IAAA,CAC9B,CAEJ,EAEAC,EAAe7B"}