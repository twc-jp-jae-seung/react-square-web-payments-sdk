{"version":3,"file":"afterpay.cjs.js","sources":["../../../src/components/afterpay/afterpay.tsx"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\nimport type * as Square from '@square/web-sdk';\n\n// Internals\nimport { useAfterpay } from '~/contexts/afterpay';\nimport { useEventListener } from '~/hooks/use-event-listener';\nimport { AfterpayContext, AfterpayProvider } from '~/contexts/afterpay';\nimport { useForm } from '~/contexts/form';\nimport { ButtonLoader } from './afterpay.styles';\nimport type {\n  AfterpayButtonProps,\n  AfterpayMessageBaseProps,\n  AfterpayMessageCustomComponentProps,\n  AfterpayMessageProps,\n  AfterpayWidgetProps,\n} from './afterpay.types';\n\nexport function AfterpayButton({\n  Button,\n  buttonColor = 'black',\n  buttonType = 'buy_now_with_afterpay',\n  finalCtaButtonType = 'buy_now',\n  id = 'rswps-afterpay-button',\n  ...props\n}: AfterpayButtonProps) {\n  const containerRef = React.useRef<HTMLElement>(null);\n  const afterpay = useAfterpay();\n  const { cardTokenizeResponseReceived } = useForm();\n\n  const options: Square.AfterpayButtonOptions = React.useMemo(\n    () => ({\n      buttonColor,\n      buttonType,\n      finalCtaButtonType,\n      useCustomButton: Boolean(Button),\n    }),\n    [Button, buttonColor, buttonType, finalCtaButtonType]\n  );\n\n  /**\n   * Handle the on click of the Afterpay button click\n   *\n   * @param e An event which takes place in the DOM.\n   * @returns The data be sended to `cardTokenizeResponseReceived()` function, or an error\n   */\n  const handlePayment = async (e: Event) => {\n    e.stopPropagation();\n\n    if (!afterpay) {\n      console.warn('Afterpay/Clearpay button was clicked, but no Afterpay/Clearpay instance was found.');\n\n      return;\n    }\n\n    try {\n      const result = await afterpay.tokenize();\n\n      if (result.status === 'OK') {\n        return cardTokenizeResponseReceived(result);\n      }\n\n      let message = `Tokenization failed with status: ${result?.status}`;\n      if (result?.errors) {\n        message += ` and errors: ${JSON.stringify(result?.errors)}`;\n\n        throw new Error(message);\n      }\n\n      console.warn(message);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  React.useEffect(() => {\n    if (afterpay) {\n      afterpay?.attach(`#${id}`, options);\n    }\n\n    return () => {\n      if (afterpay) {\n        afterpay?.destroy();\n      }\n    };\n  }, [afterpay]);\n\n  useEventListener({\n    listener: handlePayment,\n    type: 'click',\n    element: containerRef,\n    options: {\n      passive: true,\n    },\n  });\n\n  if (Button) {\n    return <Button {...props} id={id} ref={containerRef} />;\n  }\n\n  return (\n    <div {...props} id={id} ref={containerRef as React.RefObject<HTMLDivElement>}>\n      {!afterpay ? <ButtonLoader /> : null}\n    </div>\n  );\n}\n\nexport function AfterpayMessage(props: AfterpayMessageBaseProps): JSX.Element;\nexport function AfterpayMessage(props: AfterpayMessageCustomComponentProps): JSX.Element;\nexport function AfterpayMessage({\n  badgeTheme = 'black-on-mint',\n  component,\n  id = 'rswps-afterpay-message',\n  modalLinkStyle = 'circled-info-icon',\n  modalTheme = 'mint',\n  size = 'md',\n  ...props\n}: AfterpayMessageProps) {\n  const messageRef = React.useRef<HTMLDivElement>(null);\n  const afterpay = useAfterpay();\n\n  const options: Square.AfterpayMessagingOptions = React.useMemo(\n    () => ({\n      badgeTheme,\n      modalLinkStyle,\n      modalTheme,\n      size,\n    }),\n    [badgeTheme, modalLinkStyle, modalTheme, size]\n  );\n\n  React.useEffect(() => {\n    const start = async () => {\n      await afterpay?.attachMessaging(`#${id}`, options);\n    };\n\n    if (afterpay && !component?.Message) {\n      start();\n    }\n  }, [afterpay, component?.Message, options]);\n\n  const onClick = async (e: Event) => {\n    e.stopPropagation();\n\n    afterpay?.displayInformationModal({ modalTheme });\n  };\n\n  useEventListener({\n    listener: onClick,\n    type: 'click',\n    element: messageRef,\n    options: {\n      passive: true,\n    },\n  });\n\n  const Message = component?.Message;\n  if (Message) {\n    return <Message {...props} id={id} ref={messageRef} />;\n  }\n\n  return <div {...props} id={id} />;\n}\n\nexport function AfterpayWidget({ includeBranding, id = 'rswps-afterpay-widget', ...props }: AfterpayWidgetProps) {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const afterpay = useAfterpay();\n\n  React.useEffect(() => {\n    const start = async () => {\n      await afterpay?.attachCheckoutWidget(`#${id}`, {\n        includeBranding,\n      });\n    };\n\n    if (afterpay) {\n      start();\n    }\n  }, [afterpay, includeBranding]);\n\n  return <div {...props} id={id} ref={containerRef} />;\n}\n\nfunction Afterpay(props: AfterpayButtonProps) {\n  return (\n    <AfterpayProvider>\n      <AfterpayButton {...props} />\n    </AfterpayProvider>\n  );\n}\n\nexport { AfterpayContext, AfterpayProvider };\nexport default Afterpay;\nexport * from './afterpay.types';\n"],"names":["AfterpayButton","Button","buttonColor","buttonType","finalCtaButtonType","id","props","containerRef","React","afterpay","useAfterpay","cardTokenizeResponseReceived","useForm","options","handlePayment","e","result","message","error","useEventListener","ButtonLoader","AfterpayMessage","badgeTheme","component","modalLinkStyle","modalTheme","size","messageRef","start","onClick","Message","AfterpayWidget","includeBranding","Afterpay","AfterpayProvider"],"mappings":"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"}