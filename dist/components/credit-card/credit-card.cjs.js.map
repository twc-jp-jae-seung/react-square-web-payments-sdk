{"version":3,"file":"credit-card.cjs.js","sources":["../../../src/components/credit-card/credit-card.tsx"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\nimport type * as Square from '@square/web-sdk';\n\n// Internals\nimport { useForm } from '~/contexts/form';\nimport { useEventListener } from '~/hooks/use-event-listener';\nimport { LoadingCard, PayButton } from './credit-card.styles';\nimport type {\n  CreditCardBase,\n  CreditCardChildren,\n  CreditCardFunctionChildren,\n  CreditCardPayButtonProps,\n  CreditCardProps,\n} from './credit-card.types';\n\n/**\n * Renders a Credit Card Input to use in the Square Web Payment SDK, pre-styled\n * to meet Square branding guidelines.\n *\n * **_But with the option to override styles_**\n *\n * @example\n *\n * ```tsx\n * function App() {\n *   return (\n *     <SquareForm {...props}>\n *       <CreditCard />\n *     </SquareForm>\n *   );\n * }\n * ```\n */\nfunction CreditCard(props: CreditCardBase): JSX.Element;\nfunction CreditCard(props: CreditCardChildren): JSX.Element;\nfunction CreditCard(props: CreditCardFunctionChildren): JSX.Element;\nfunction CreditCard({\n  buttonProps,\n  callbacks,\n  children,\n  focus,\n  id = 'rswps-card-container',\n  includeInputLabels,\n  postalCode,\n  recalculateSize,\n  render,\n  style,\n  ...props\n}: CreditCardProps) {\n  const [card, setCard] = React.useState<Square.Card | undefined>(() => undefined);\n  const [isSubmitting, setIsSubmitting] = React.useState<boolean>(false);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n  const { cardTokenizeResponseReceived, payments } = useForm();\n\n  const options: Square.CardOptions = React.useMemo(() => {\n    const baseOptions = {\n      includeInputLabels,\n      postalCode,\n      style,\n    };\n\n    // if a value from options is undefined delete it from the options object\n    return Object.keys(baseOptions).reduce((acc: Record<string, unknown>, key) => {\n      if (baseOptions[key as keyof typeof baseOptions] !== undefined) {\n        acc[key as string] = baseOptions[key as keyof typeof baseOptions];\n      }\n\n      return acc;\n    }, {});\n  }, [includeInputLabels, postalCode, style]);\n\n  /**\n   * Handle the on click of the Credit Card button click\n   *\n   * @param e An event which takes place in the DOM.\n   * @returns The data be sended to `cardTokenizeResponseReceived()` function, or an error\n   */\n  const handlePayment = async (e: Event) => {\n    e.stopPropagation();\n\n    if (buttonProps?.isLoading) return;\n\n    if (!card) {\n      console.warn('Credit Card button was clicked, but no Credit Card instance was found.');\n\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const result = await card.tokenize();\n\n      if (result.status === 'OK') {\n        const tokenizedResult = await cardTokenizeResponseReceived(result);\n        return tokenizedResult;\n      }\n\n      let message = `Tokenization failed with status: ${result.status}`;\n      if (result?.errors) {\n        message += ` and errors: ${JSON.stringify(result?.errors)}`;\n\n        throw new Error(message);\n      }\n\n      console.warn(message);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  React.useEffect(() => {\n    const abortController = new AbortController();\n    const { signal } = abortController;\n\n    const start = async (signal: AbortSignal) => {\n      const card = await payments?.card(options).then((res) => {\n        if (!signal.aborted) {\n          setCard(res);\n          return res;\n        }\n\n        return null;\n      });\n\n      await card?.attach(`#${id}`);\n      if (focus) {\n        await card?.focus(focus);\n      }\n\n      if (signal.aborted) {\n        await card?.destroy();\n      }\n    };\n\n    start(signal);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [payments, id]);\n\n  React.useEffect(() => {\n    if (card && focus) {\n      card.focus(focus);\n    }\n  }, [card, focus]);\n\n  if (callbacks) {\n    for (const callback of Object.keys(callbacks)) {\n      card?.addEventListener(\n        callback as Square.CardInputEventTypes,\n        (callbacks as Record<string, (event: Square.SqEvent<Square.CardInputEvent>) => void>)[callback]\n      );\n    }\n  }\n\n  if (recalculateSize) {\n    recalculateSize(card?.recalculateSize);\n  }\n\n  useEventListener({\n    listener: handlePayment,\n    type: 'click',\n    element: buttonRef,\n    options: {\n      passive: true,\n    },\n  });\n\n  const Button = ({ children, isLoading, ...props }: CreditCardPayButtonProps) => {\n    const id = 'rswp-card-button';\n    const disabled = isLoading || !card || isSubmitting;\n\n    return (\n      <PayButton\n        {...props}\n        aria-disabled={disabled}\n        css={props?.css}\n        disabled={disabled}\n        id={id}\n        ref={buttonRef}\n        type=\"button\"\n      >\n        {children ?? 'Pay'}\n      </PayButton>\n    );\n  };\n\n  return (\n    <>\n      <div {...props} data-testid=\"rswps-card-container\" id={id} style={{ minHeight: 89 }}>\n        {!card && <LoadingCard />}\n      </div>\n\n      {typeof render === 'function' ? render(Button) : <Button {...buttonProps}>{children ?? 'Pay'}</Button>}\n    </>\n  );\n}\n\nexport default CreditCard;\nexport * from './credit-card.types';\n"],"names":["CreditCard","buttonProps","callbacks","children","focus","id","includeInputLabels","postalCode","recalculateSize","render","style","props","card","setCard","React","isSubmitting","setIsSubmitting","buttonRef","cardTokenizeResponseReceived","payments","useForm","options","baseOptions","acc","key","handlePayment","e","result","message","error","abortController","signal","res","callback","useEventListener","Button","isLoading","disabled","PayButton","LoadingCard"],"mappings":"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"}