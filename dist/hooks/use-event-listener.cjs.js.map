{"version":3,"file":"use-event-listener.cjs.js","sources":["../../src/hooks/use-event-listener.ts"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\n\nconst isSsr = !(\n  typeof window !== 'undefined' && window.document?.createElement\n);\n\ntype UseEventListenerProps = {\n  type: keyof WindowEventMap;\n  listener: EventListener;\n  element?: React.RefObject<Element> | HTMLElement | Document | Window | null;\n  options?: AddEventListenerOptions;\n};\n\nfunction useEventListener({\n  type,\n  listener,\n  element = isSsr ? undefined : window,\n  options,\n}: UseEventListenerProps) {\n  const savedListener = React.useRef<EventListener>();\n\n  React.useEffect(() => {\n    savedListener.current = listener;\n  }, [listener]);\n\n  const handleEventListener = React.useCallback((event: Event) => {\n    savedListener.current?.(event);\n  }, []);\n\n  React.useEffect(() => {\n    const target = element as Element;\n\n    target?.addEventListener(type, handleEventListener, options);\n\n    return () => target?.removeEventListener(type, handleEventListener);\n  }, [type, element, options, handleEventListener]);\n}\n\nexport { useEventListener };\nexport type { UseEventListenerProps };\n"],"names":["isSsr","useEventListener","type","listener","element","options","savedListener","React","handleEventListener","event","target"],"mappings":"2bAGMA,EAAQ,EACZ,OAAO,OAAW,KAAe,OAAO,UAAU,eAUpD,SAASC,EAAiB,CACxB,KAAAC,EACA,SAAAC,EACA,QAAAC,EAAUJ,EAAQ,OAAY,OAC9B,QAAAK,CACF,EAA0B,CAClB,MAAAC,EAAgBC,EAAM,SAE5BA,EAAM,UAAU,IAAM,CACpBD,EAAc,QAAUH,CAAA,EACvB,CAACA,CAAQ,CAAC,EAEb,MAAMK,EAAsBD,EAAM,YAAaE,GAAiB,CAC9DH,EAAc,UAAUG,CAAK,CAC/B,EAAG,CAAE,CAAA,EAELF,EAAM,UAAU,IAAM,CACpB,MAAMG,EAASN,EAEP,OAAAM,GAAA,iBAAiBR,EAAMM,EAAqBH,CAAO,EAEpD,IAAMK,GAAQ,oBAAoBR,EAAMM,CAAmB,GACjE,CAACN,EAAME,EAASC,EAASG,CAAmB,CAAC,CAClD"}