{"version":3,"file":"use-event-listener.es.mjs","sources":["../../src/hooks/use-event-listener.ts"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\n\nconst isSsr = !(\n  typeof window !== 'undefined' && window.document?.createElement\n);\n\ntype UseEventListenerProps = {\n  type: keyof WindowEventMap;\n  listener: EventListener;\n  element?: React.RefObject<Element> | HTMLElement | Document | Window | null;\n  options?: AddEventListenerOptions;\n};\n\nfunction useEventListener({\n  type,\n  listener,\n  element = isSsr ? undefined : window,\n  options,\n}: UseEventListenerProps) {\n  const savedListener = React.useRef<EventListener>();\n\n  React.useEffect(() => {\n    savedListener.current = listener;\n  }, [listener]);\n\n  const handleEventListener = React.useCallback((event: Event) => {\n    savedListener.current?.(event);\n  }, []);\n\n  React.useEffect(() => {\n    const target = element as Element;\n\n    target?.addEventListener(type, handleEventListener, options);\n\n    return () => target?.removeEventListener(type, handleEventListener);\n  }, [type, element, options, handleEventListener]);\n}\n\nexport { useEventListener };\nexport type { UseEventListenerProps };\n"],"names":["isSsr","useEventListener","type","listener","element","options","savedListener","React","handleEventListener","event","target"],"mappings":";AAGA,MAAMA,IAAQ,EACZ,OAAO,SAAW,OAAe,OAAO,UAAU;AAUpD,SAASC,EAAiB;AAAA,EACxB,MAAAC;AAAA,EACA,UAAAC;AAAA,EACA,SAAAC,IAAUJ,IAAQ,SAAY;AAAA,EAC9B,SAAAK;AACF,GAA0B;AAClB,QAAAC,IAAgBC,EAAM;AAE5B,EAAAA,EAAM,UAAU,MAAM;AACpB,IAAAD,EAAc,UAAUH;AAAA,EAAA,GACvB,CAACA,CAAQ,CAAC;AAEb,QAAMK,IAAsBD,EAAM,YAAY,CAACE,MAAiB;AAC9D,IAAAH,EAAc,UAAUG,CAAK;AAAA,EAC/B,GAAG,CAAE,CAAA;AAEL,EAAAF,EAAM,UAAU,MAAM;AACpB,UAAMG,IAASN;AAEP,WAAAM,GAAA,iBAAiBR,GAAMM,GAAqBH,CAAO,GAEpD,MAAMK,GAAQ,oBAAoBR,GAAMM,CAAmB;AAAA,KACjE,CAACN,GAAME,GAASC,GAASG,CAAmB,CAAC;AAClD;"}