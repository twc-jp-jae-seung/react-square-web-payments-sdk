{"version":3,"file":"afterpay.cjs.js","sources":["../../../src/contexts/afterpay/afterpay.tsx"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\nimport type * as Square from '@square/web-sdk';\n\n// Internals\nimport { useForm } from '../form';\nimport type { AfterpayProviderProps } from './afterpay.types';\n\nexport const AfterpayContext = React.createContext<Square.AfterpayClearpay | null | undefined>(null);\n\nfunction AfterpayProvider({ children, onShippingAddressChange, onShippingOptionChange }: AfterpayProviderProps) {\n  const [afterpay, setAfterpay] = React.useState<Square.AfterpayClearpay | null>(null);\n  const { createPaymentRequest, payments } = useForm();\n\n  if (!createPaymentRequest) {\n    throw new Error('`createPaymentRequest()` is required when using digital wallets');\n  }\n\n  React.useEffect(() => {\n    const abortController = new AbortController();\n    const { signal } = abortController;\n\n    const start = async (signal: AbortSignal) => {\n      const paymentRequest = payments?.paymentRequest(createPaymentRequest);\n\n      if (!paymentRequest) {\n        throw new Error('`paymentRequest` is required when using digital wallets');\n      }\n\n      if (onShippingAddressChange) {\n        paymentRequest.addEventListener('afterpay_shippingaddresschanged', onShippingAddressChange);\n      }\n      if (onShippingOptionChange) {\n        paymentRequest.addEventListener('afterpay_shippingoptionchanged', onShippingOptionChange);\n      }\n\n      const afterpay = await payments?.afterpayClearpay(paymentRequest).then((res) => {\n        if (!signal.aborted) {\n          setAfterpay(res);\n\n          return res;\n        }\n\n        return null;\n      });\n\n      if (signal.aborted) {\n        await afterpay?.destroy();\n      }\n    };\n\n    start(signal);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [createPaymentRequest, payments]);\n\n  return <AfterpayContext.Provider value={afterpay}>{children}</AfterpayContext.Provider>;\n}\n\nexport function useAfterpay() {\n  const context = React.useContext(AfterpayContext);\n\n  if (context === undefined) {\n    throw new Error('`useAfterpay()` must be used within an `<AfterpayProvider>`');\n  }\n\n  return context;\n}\n\nexport default AfterpayProvider;\n"],"names":["AfterpayContext","React","AfterpayProvider","children","onShippingAddressChange","onShippingOptionChange","afterpay","setAfterpay","createPaymentRequest","payments","useForm","abortController","signal","paymentRequest","res","useAfterpay","context"],"mappings":"4dAQaA,EAAkBC,EAAM,cAA0D,IAAI,EAEnG,SAASC,EAAiB,CAAE,SAAAC,EAAU,wBAAAC,EAAyB,uBAAAC,GAAiD,CAC9G,KAAM,CAACC,EAAUC,CAAW,EAAIN,EAAM,SAAyC,IAAI,EAC7E,CAAE,qBAAAO,EAAsB,SAAAC,CAAS,EAAIC,EAAQ,QAAA,EAEnD,GAAI,CAACF,EACG,MAAA,IAAI,MAAM,iEAAiE,EAGnFP,OAAAA,EAAM,UAAU,IAAM,CACd,MAAAU,EAAkB,IAAI,gBACtB,CAAE,OAAAC,CAAW,EAAAD,EA+BnB,OA7Bc,MAAOC,GAAwB,CACrC,MAAAC,EAAiBJ,GAAU,eAAeD,CAAoB,EAEpE,GAAI,CAACK,EACG,MAAA,IAAI,MAAM,yDAAyD,EAGvET,GACaS,EAAA,iBAAiB,kCAAmCT,CAAuB,EAExFC,GACaQ,EAAA,iBAAiB,iCAAkCR,CAAsB,EAGpFC,MAAAA,EAAW,MAAMG,GAAU,iBAAiBI,CAAc,EAAE,KAAMC,GACjEF,EAAO,QAML,MALLL,EAAYO,CAAG,EAERA,EAIV,EAEGF,EAAO,SACT,MAAMN,GAAU,SAClB,GAGIM,CAAM,EAEL,IAAM,CACXD,EAAgB,MAAM,CAAA,CACxB,EACC,CAACH,EAAsBC,CAAQ,CAAC,kBAE3BT,EAAgB,SAAhB,CAAyB,MAAOM,GAAWH,CAAS,CAC9D,CAEO,SAASY,GAAc,CACtB,MAAAC,EAAUf,EAAM,WAAWD,CAAe,EAEhD,GAAIgB,IAAY,OACR,MAAA,IAAI,MAAM,6DAA6D,EAGxE,OAAAA,CACT"}